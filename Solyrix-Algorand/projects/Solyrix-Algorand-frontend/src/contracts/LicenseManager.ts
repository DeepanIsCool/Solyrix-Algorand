/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"LicenseManager","structs":{},"methods":[{"name":"create_license","args":[{"type":"string","name":"context_id"},{"type":"uint64","name":"license_type"},{"type":"uint64","name":"price"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Create a new license for a context","events":[],"recommendations":{}},{"name":"purchase_license","args":[{"type":"string","name":"license_id"}],"returns":{"type":"string"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Purchase a license","events":[],"recommendations":{}},{"name":"get_license_price","args":[{"type":"string","name":"license_id"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get license price - simplified implementation","events":[],"recommendations":{}},{"name":"get_platform_fee_percentage","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Get platform fee percentage","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"Minimal production-ready smart contract for license management","networks":{},"state":{"schema":{"global":{"ints":0,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[50,74,98,133],"errorMessage":"OnCompletion is not NoOp"},{"pc":[182],"errorMessage":"Price too low"},{"pc":[170],"errorMessage":"can only call when creating"},{"pc":[53,77,101,136],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvbGljZW5zZV9tYW5hZ2VyL2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIExpY2Vuc2VNYW5hZ2VyKEFSQzRDb250cmFjdCk6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAOQogICAgcHVzaGJ5dGVzcyAweDg0NjZiODJlIDB4YTJhZTM2YTQgMHg4MTBhYjIyYyAweGUyOTc0OWY4IC8vIG1ldGhvZCAiY3JlYXRlX2xpY2Vuc2Uoc3RyaW5nLHVpbnQ2NCx1aW50NjQpc3RyaW5nIiwgbWV0aG9kICJwdXJjaGFzZV9saWNlbnNlKHN0cmluZylzdHJpbmciLCBtZXRob2QgImdldF9saWNlbnNlX3ByaWNlKHN0cmluZyl1aW50NjQiLCBtZXRob2QgImdldF9wbGF0Zm9ybV9mZWVfcGVyY2VudGFnZSgpdWludDY0IgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9jcmVhdGVfbGljZW5zZV9yb3V0ZUAzIG1haW5fcHVyY2hhc2VfbGljZW5zZV9yb3V0ZUA0IG1haW5fZ2V0X2xpY2Vuc2VfcHJpY2Vfcm91dGVANSBtYWluX2dldF9wbGF0Zm9ybV9mZWVfcGVyY2VudGFnZV9yb3V0ZUA2CgptYWluX2FmdGVyX2lmX2Vsc2VAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGljZW5zZV9tYW5hZ2VyL2NvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIExpY2Vuc2VNYW5hZ2VyKEFSQzRDb250cmFjdCk6CiAgICBwdXNoaW50IDAgLy8gMAogICAgcmV0dXJuCgptYWluX2dldF9wbGF0Zm9ybV9mZWVfcGVyY2VudGFnZV9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL2xpY2Vuc2VfbWFuYWdlci9jb250cmFjdC5weTozMwogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1MDAwMDAwMDAwMDAwMDBmYQogICAgbG9nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgptYWluX2dldF9saWNlbnNlX3ByaWNlX3JvdXRlQDU6CiAgICAvLyBzbWFydF9jb250cmFjdHMvbGljZW5zZV9tYW5hZ2VyL2NvbnRyYWN0LnB5OjI4CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgcHVzaGJ5dGVzIDB4MTUxZjdjNzUwMDAwMDAwMDAwMDAwYmI4CiAgICBsb2cKICAgIGludGNfMCAvLyAxCiAgICByZXR1cm4KCm1haW5fcHVyY2hhc2VfbGljZW5zZV9yb3V0ZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL2xpY2Vuc2VfbWFuYWdlci9jb250cmFjdC5weToyMwogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1MDAxMTZjNjk2MzY1NmU3MzY1NWY3MDc1NzI2MzY4NjE3MzY1NjQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9jcmVhdGVfbGljZW5zZV9yb3V0ZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL2xpY2Vuc2VfbWFuYWdlci9jb250cmFjdC5weTo4CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL2xpY2Vuc2VfbWFuYWdlci9jb250cmFjdC5weTo1CiAgICAvLyBjbGFzcyBMaWNlbnNlTWFuYWdlcihBUkM0Q29udHJhY3QpOgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL2xpY2Vuc2VfbWFuYWdlci9jb250cmFjdC5weTo4CiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgY3JlYXRlX2xpY2Vuc2UKICAgIHB1c2hieXRlcyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18wIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdAOToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWNlbnNlX21hbmFnZXIvY29udHJhY3QucHk6NQogICAgLy8gY2xhc3MgTGljZW5zZU1hbmFnZXIoQVJDNENvbnRyYWN0KToKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTMKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzAgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzLmxpY2Vuc2VfbWFuYWdlci5jb250cmFjdC5MaWNlbnNlTWFuYWdlci5jcmVhdGVfbGljZW5zZShjb250ZXh0X2lkOiBieXRlcywgbGljZW5zZV90eXBlOiB1aW50NjQsIHByaWNlOiB1aW50NjQpIC0+IGJ5dGVzOgpjcmVhdGVfbGljZW5zZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWNlbnNlX21hbmFnZXIvY29udHJhY3QucHk6OC0xNAogICAgLy8gQGFiaW1ldGhvZCgpCiAgICAvLyBkZWYgY3JlYXRlX2xpY2Vuc2UoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBjb250ZXh0X2lkOiBTdHJpbmcsCiAgICAvLyAgICAgbGljZW5zZV90eXBlOiBVSW50NjQsCiAgICAvLyAgICAgcHJpY2U6IFVJbnQ2NAogICAgLy8gKSAtPiBTdHJpbmc6CiAgICBwcm90byAzIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWNlbnNlX21hbmFnZXIvY29udHJhY3QucHk6MTctMTgKICAgIC8vICMgQmFzaWMgdmFsaWRhdGlvbgogICAgLy8gYXNzZXJ0IHByaWNlID49IFVJbnQ2NCgxMDAwKSwgIlByaWNlIHRvbyBsb3ciCiAgICBmcmFtZV9kaWcgLTEKICAgIHB1c2hpbnQgMTAwMCAvLyAxMDAwCiAgICA+PQogICAgYXNzZXJ0IC8vIFByaWNlIHRvbyBsb3cKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9saWNlbnNlX21hbmFnZXIvY29udHJhY3QucHk6MjAtMjEKICAgIC8vICMgUmV0dXJuIGEgc2ltcGxlIGxpY2Vuc2UgSUQKICAgIC8vIHJldHVybiBTdHJpbmcoImxpY19jcmVhdGVkIikKICAgIHB1c2hieXRlcyAweDAwMGI2YzY5NjM1ZjYzNzI2NTYxNzQ2NTY0CiAgICByZXRzdWIK","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CiABATEbQQCZggQEhGa4LgSirjakBIEKsiwE4pdJ+DYaAI4EAFYAMwAbAAOBAEMxGRREMRhEgAwVH3x1AAAAAAAAAPqwIkMxGRREMRhEgAwVH3x1AAAAAAAAC7iwIkMxGRREMRhEgBcVH3x1ABFsaWNlbnNlX3B1cmNoYXNlZLAiQzEZFEQxGEQ2GgE2GgIXNhoDF4gAFoAEFR98dUxQsCJDMRlA/4UxGBREIkOKAwGL/4HoBw9EgA0AC2xpY19jcmVhdGVkiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":10,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the LicenseManager contract
 */
export type LicenseManagerArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_license(string,uint64,uint64)string': {
      contextId: string
      licenseType: bigint | number
      price: bigint | number
    }
    'purchase_license(string)string': {
      licenseId: string
    }
    'get_license_price(string)uint64': {
      licenseId: string
    }
    'get_platform_fee_percentage()uint64': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_license(string,uint64,uint64)string': [contextId: string, licenseType: bigint | number, price: bigint | number]
    'purchase_license(string)string': [licenseId: string]
    'get_license_price(string)uint64': [licenseId: string]
    'get_platform_fee_percentage()uint64': []
  }
}

/**
 * The return type for each method
 */
export type LicenseManagerReturns = {
  'create_license(string,uint64,uint64)string': string
  'purchase_license(string)string': string
  'get_license_price(string)uint64': bigint
  'get_platform_fee_percentage()uint64': bigint
}

/**
 * Defines the types of available calls and state of the LicenseManager smart contract.
 */
export type LicenseManagerTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_license(string,uint64,uint64)string' | 'create_license', {
      argsObj: LicenseManagerArgs['obj']['create_license(string,uint64,uint64)string']
      argsTuple: LicenseManagerArgs['tuple']['create_license(string,uint64,uint64)string']
      returns: LicenseManagerReturns['create_license(string,uint64,uint64)string']
    }>
    & Record<'purchase_license(string)string' | 'purchase_license', {
      argsObj: LicenseManagerArgs['obj']['purchase_license(string)string']
      argsTuple: LicenseManagerArgs['tuple']['purchase_license(string)string']
      returns: LicenseManagerReturns['purchase_license(string)string']
    }>
    & Record<'get_license_price(string)uint64' | 'get_license_price', {
      argsObj: LicenseManagerArgs['obj']['get_license_price(string)uint64']
      argsTuple: LicenseManagerArgs['tuple']['get_license_price(string)uint64']
      returns: LicenseManagerReturns['get_license_price(string)uint64']
    }>
    & Record<'get_platform_fee_percentage()uint64' | 'get_platform_fee_percentage', {
      argsObj: LicenseManagerArgs['obj']['get_platform_fee_percentage()uint64']
      argsTuple: LicenseManagerArgs['tuple']['get_platform_fee_percentage()uint64']
      returns: LicenseManagerReturns['get_platform_fee_percentage()uint64']
    }>
}

/**
 * Defines the possible abi call signatures.
 */
export type LicenseManagerSignatures = keyof LicenseManagerTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type LicenseManagerNonVoidMethodSignatures = keyof LicenseManagerTypes['methods'] extends infer T ? T extends keyof LicenseManagerTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the LicenseManager smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends LicenseManagerSignatures> = LicenseManagerTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the LicenseManager smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LicenseManagerSignatures> = LicenseManagerTypes['methods'][TSignature]['returns']


/**
 * Defines supported create method params for this smart contract
 */
export type LicenseManagerCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type LicenseManagerDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: LicenseManagerCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the LicenseManager smart contract
 */
export abstract class LicenseManagerParamsFactory {
  /**
   * Constructs a no op call for the create_license(string,uint64,uint64)string ABI method
   *
   * Create a new license for a context
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createLicense(params: CallParams<LicenseManagerArgs['obj']['create_license(string,uint64,uint64)string'] | LicenseManagerArgs['tuple']['create_license(string,uint64,uint64)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_license(string,uint64,uint64)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.contextId, params.args.licenseType, params.args.price],
    }
  }
  /**
   * Constructs a no op call for the purchase_license(string)string ABI method
   *
   * Purchase a license
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static purchaseLicense(params: CallParams<LicenseManagerArgs['obj']['purchase_license(string)string'] | LicenseManagerArgs['tuple']['purchase_license(string)string']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'purchase_license(string)string' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.licenseId],
    }
  }
  /**
   * Constructs a no op call for the get_license_price(string)uint64 ABI method
   *
   * Get license price - simplified implementation
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLicensePrice(params: CallParams<LicenseManagerArgs['obj']['get_license_price(string)uint64'] | LicenseManagerArgs['tuple']['get_license_price(string)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_license_price(string)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.licenseId],
    }
  }
  /**
   * Constructs a no op call for the get_platform_fee_percentage()uint64 ABI method
   *
   * Get platform fee percentage
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPlatformFeePercentage(params: CallParams<LicenseManagerArgs['obj']['get_platform_fee_percentage()uint64'] | LicenseManagerArgs['tuple']['get_platform_fee_percentage()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'get_platform_fee_percentage()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the LicenseManager smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class LicenseManagerFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `LicenseManagerFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new LicenseManagerClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new LicenseManagerClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the LicenseManager smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: LicenseManagerDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new LicenseManagerClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LicenseManager smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LicenseManager smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the LicenseManager smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new LicenseManagerClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the LicenseManager smart contract
 */
export class LicenseManagerClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `LicenseManagerClient`
   *
   * @param appClient An `AppClient` instance which has been created with the LicenseManager app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `LicenseManagerClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends LicenseManagerNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `LicenseManagerClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<LicenseManagerClient> {
    return new LicenseManagerClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `LicenseManagerClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<LicenseManagerClient> {
    return new LicenseManagerClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the LicenseManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the LicenseManager smart contract using the `create_license(string,uint64,uint64)string` ABI method.
     *
     * Create a new license for a context
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createLicense: (params: CallParams<LicenseManagerArgs['obj']['create_license(string,uint64,uint64)string'] | LicenseManagerArgs['tuple']['create_license(string,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LicenseManagerParamsFactory.createLicense(params))
    },

    /**
     * Makes a call to the LicenseManager smart contract using the `purchase_license(string)string` ABI method.
     *
     * Purchase a license
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    purchaseLicense: (params: CallParams<LicenseManagerArgs['obj']['purchase_license(string)string'] | LicenseManagerArgs['tuple']['purchase_license(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LicenseManagerParamsFactory.purchaseLicense(params))
    },

    /**
     * Makes a call to the LicenseManager smart contract using the `get_license_price(string)uint64` ABI method.
     *
     * Get license price - simplified implementation
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLicensePrice: (params: CallParams<LicenseManagerArgs['obj']['get_license_price(string)uint64'] | LicenseManagerArgs['tuple']['get_license_price(string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LicenseManagerParamsFactory.getLicensePrice(params))
    },

    /**
     * Makes a call to the LicenseManager smart contract using the `get_platform_fee_percentage()uint64` ABI method.
     *
     * Get platform fee percentage
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPlatformFeePercentage: (params: CallParams<LicenseManagerArgs['obj']['get_platform_fee_percentage()uint64'] | LicenseManagerArgs['tuple']['get_platform_fee_percentage()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(LicenseManagerParamsFactory.getPlatformFeePercentage(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the LicenseManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the LicenseManager smart contract using the `create_license(string,uint64,uint64)string` ABI method.
     *
     * Create a new license for a context
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createLicense: (params: CallParams<LicenseManagerArgs['obj']['create_license(string,uint64,uint64)string'] | LicenseManagerArgs['tuple']['create_license(string,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LicenseManagerParamsFactory.createLicense(params))
    },

    /**
     * Makes a call to the LicenseManager smart contract using the `purchase_license(string)string` ABI method.
     *
     * Purchase a license
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    purchaseLicense: (params: CallParams<LicenseManagerArgs['obj']['purchase_license(string)string'] | LicenseManagerArgs['tuple']['purchase_license(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LicenseManagerParamsFactory.purchaseLicense(params))
    },

    /**
     * Makes a call to the LicenseManager smart contract using the `get_license_price(string)uint64` ABI method.
     *
     * Get license price - simplified implementation
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLicensePrice: (params: CallParams<LicenseManagerArgs['obj']['get_license_price(string)uint64'] | LicenseManagerArgs['tuple']['get_license_price(string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LicenseManagerParamsFactory.getLicensePrice(params))
    },

    /**
     * Makes a call to the LicenseManager smart contract using the `get_platform_fee_percentage()uint64` ABI method.
     *
     * Get platform fee percentage
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPlatformFeePercentage: (params: CallParams<LicenseManagerArgs['obj']['get_platform_fee_percentage()uint64'] | LicenseManagerArgs['tuple']['get_platform_fee_percentage()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(LicenseManagerParamsFactory.getPlatformFeePercentage(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the LicenseManager smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the LicenseManager smart contract using the `create_license(string,uint64,uint64)string` ABI method.
     *
     * Create a new license for a context
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createLicense: async (params: CallParams<LicenseManagerArgs['obj']['create_license(string,uint64,uint64)string'] | LicenseManagerArgs['tuple']['create_license(string,uint64,uint64)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LicenseManagerParamsFactory.createLicense(params))
      return {...result, return: result.return as unknown as (undefined | LicenseManagerReturns['create_license(string,uint64,uint64)string'])}
    },

    /**
     * Makes a call to the LicenseManager smart contract using the `purchase_license(string)string` ABI method.
     *
     * Purchase a license
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    purchaseLicense: async (params: CallParams<LicenseManagerArgs['obj']['purchase_license(string)string'] | LicenseManagerArgs['tuple']['purchase_license(string)string']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LicenseManagerParamsFactory.purchaseLicense(params))
      return {...result, return: result.return as unknown as (undefined | LicenseManagerReturns['purchase_license(string)string'])}
    },

    /**
     * Makes a call to the LicenseManager smart contract using the `get_license_price(string)uint64` ABI method.
     *
     * Get license price - simplified implementation
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLicensePrice: async (params: CallParams<LicenseManagerArgs['obj']['get_license_price(string)uint64'] | LicenseManagerArgs['tuple']['get_license_price(string)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LicenseManagerParamsFactory.getLicensePrice(params))
      return {...result, return: result.return as unknown as (undefined | LicenseManagerReturns['get_license_price(string)uint64'])}
    },

    /**
     * Makes a call to the LicenseManager smart contract using the `get_platform_fee_percentage()uint64` ABI method.
     *
     * Get platform fee percentage
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPlatformFeePercentage: async (params: CallParams<LicenseManagerArgs['obj']['get_platform_fee_percentage()uint64'] | LicenseManagerArgs['tuple']['get_platform_fee_percentage()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(LicenseManagerParamsFactory.getPlatformFeePercentage(params))
      return {...result, return: result.return as unknown as (undefined | LicenseManagerReturns['get_platform_fee_percentage()uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new LicenseManagerClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current LicenseManager app
   */
  state = {
  }

  public newGroup(): LicenseManagerComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a create_license(string,uint64,uint64)string method call against the LicenseManager contract
       */
      createLicense(params: CallParams<LicenseManagerArgs['obj']['create_license(string,uint64,uint64)string'] | LicenseManagerArgs['tuple']['create_license(string,uint64,uint64)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createLicense(params)))
        resultMappers.push((v) => client.decodeReturnValue('create_license(string,uint64,uint64)string', v))
        return this
      },
      /**
       * Add a purchase_license(string)string method call against the LicenseManager contract
       */
      purchaseLicense(params: CallParams<LicenseManagerArgs['obj']['purchase_license(string)string'] | LicenseManagerArgs['tuple']['purchase_license(string)string']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.purchaseLicense(params)))
        resultMappers.push((v) => client.decodeReturnValue('purchase_license(string)string', v))
        return this
      },
      /**
       * Add a get_license_price(string)uint64 method call against the LicenseManager contract
       */
      getLicensePrice(params: CallParams<LicenseManagerArgs['obj']['get_license_price(string)uint64'] | LicenseManagerArgs['tuple']['get_license_price(string)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLicensePrice(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_license_price(string)uint64', v))
        return this
      },
      /**
       * Add a get_platform_fee_percentage()uint64 method call against the LicenseManager contract
       */
      getPlatformFeePercentage(params: CallParams<LicenseManagerArgs['obj']['get_platform_fee_percentage()uint64'] | LicenseManagerArgs['tuple']['get_platform_fee_percentage()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPlatformFeePercentage(params)))
        resultMappers.push((v) => client.decodeReturnValue('get_platform_fee_percentage()uint64', v))
        return this
      },
      /**
       * Add a clear state call to the LicenseManager contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as LicenseManagerComposer
  }
}
export type LicenseManagerComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the create_license(string,uint64,uint64)string ABI method.
   *
   * Create a new license for a context
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createLicense(params?: CallParams<LicenseManagerArgs['obj']['create_license(string,uint64,uint64)string'] | LicenseManagerArgs['tuple']['create_license(string,uint64,uint64)string']>): LicenseManagerComposer<[...TReturns, LicenseManagerReturns['create_license(string,uint64,uint64)string'] | undefined]>

  /**
   * Calls the purchase_license(string)string ABI method.
   *
   * Purchase a license
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchaseLicense(params?: CallParams<LicenseManagerArgs['obj']['purchase_license(string)string'] | LicenseManagerArgs['tuple']['purchase_license(string)string']>): LicenseManagerComposer<[...TReturns, LicenseManagerReturns['purchase_license(string)string'] | undefined]>

  /**
   * Calls the get_license_price(string)uint64 ABI method.
   *
   * Get license price - simplified implementation
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLicensePrice(params?: CallParams<LicenseManagerArgs['obj']['get_license_price(string)uint64'] | LicenseManagerArgs['tuple']['get_license_price(string)uint64']>): LicenseManagerComposer<[...TReturns, LicenseManagerReturns['get_license_price(string)uint64'] | undefined]>

  /**
   * Calls the get_platform_fee_percentage()uint64 ABI method.
   *
   * Get platform fee percentage
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPlatformFeePercentage(params?: CallParams<LicenseManagerArgs['obj']['get_platform_fee_percentage()uint64'] | LicenseManagerArgs['tuple']['get_platform_fee_percentage()uint64']>): LicenseManagerComposer<[...TReturns, LicenseManagerReturns['get_platform_fee_percentage()uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the LicenseManager smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): LicenseManagerComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): LicenseManagerComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<LicenseManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<LicenseManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<LicenseManagerComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<LicenseManagerComposerResults<TReturns>>
}
export type LicenseManagerComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

