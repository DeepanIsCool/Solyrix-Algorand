{
  "version": 3,
  "sources": [
    "../../context_registry/contract.py"
  ],
  "mappings": ";;;;AAIA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;AAAA;;;AA4BK;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;;;;;;;;;AAAA;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AAHL;;;AAAA;;;AAAA;;;AAAA;AAGK;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AAHL;;AAAA;;;;;;;;;AAGA;;;AAUe;;AAAS;;;AAAT;AAAP;AAGO;;;;;;;;;;;;;;;AAAP",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "algopy.arc4.ARC4Contract.approval_program",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1"
    },
    "4": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "6": {
      "op": "bz main_bare_routing@9",
      "stack_out": []
    },
    "9": {
      "op": "pushbytess 0x130f91fc 0xd97d7f21 0x620bbae0 0xe29749f8 // method \"create_context(string,string,uint64)string\", method \"get_context_price(string)uint64\", method \"purchase_context(string)string\", method \"get_platform_fee_percentage()uint64\"",
      "defined_out": [
        "Method(create_context(string,string,uint64)string)",
        "Method(get_context_price(string)uint64)",
        "Method(get_platform_fee_percentage()uint64)",
        "Method(purchase_context(string)string)"
      ],
      "stack_out": [
        "Method(create_context(string,string,uint64)string)",
        "Method(get_context_price(string)uint64)",
        "Method(purchase_context(string)string)",
        "Method(get_platform_fee_percentage()uint64)"
      ]
    },
    "31": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(create_context(string,string,uint64)string)",
        "Method(get_context_price(string)uint64)",
        "Method(get_platform_fee_percentage()uint64)",
        "Method(purchase_context(string)string)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(create_context(string,string,uint64)string)",
        "Method(get_context_price(string)uint64)",
        "Method(purchase_context(string)string)",
        "Method(get_platform_fee_percentage()uint64)",
        "tmp%2#0"
      ]
    },
    "34": {
      "op": "match main_create_context_route@3 main_get_context_price_route@4 main_purchase_context_route@5 main_get_platform_fee_percentage_route@6",
      "stack_out": []
    },
    "44": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "pushint 0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "46": {
      "op": "return",
      "stack_out": []
    },
    "47": {
      "block": "main_get_platform_fee_percentage_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "49": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "50": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "51": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "53": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "54": {
      "op": "pushbytes 0x151f7c7500000000000000fa",
      "defined_out": [
        "0x151f7c7500000000000000fa"
      ],
      "stack_out": [
        "0x151f7c7500000000000000fa"
      ]
    },
    "68": {
      "op": "log",
      "stack_out": []
    },
    "69": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "70": {
      "op": "return",
      "stack_out": []
    },
    "71": {
      "block": "main_purchase_context_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "73": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "74": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "75": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "77": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "78": {
      "op": "pushbytes 0x151f7c75001070757263686173655f73756363657373",
      "defined_out": [
        "0x151f7c75001070757263686173655f73756363657373"
      ],
      "stack_out": [
        "0x151f7c75001070757263686173655f73756363657373"
      ]
    },
    "102": {
      "op": "log",
      "stack_out": []
    },
    "103": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "104": {
      "op": "return",
      "stack_out": []
    },
    "105": {
      "block": "main_get_context_price_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "107": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "108": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "109": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "111": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "112": {
      "op": "pushbytes 0x151f7c750000000000001388",
      "defined_out": [
        "0x151f7c750000000000001388"
      ],
      "stack_out": [
        "0x151f7c750000000000001388"
      ]
    },
    "126": {
      "op": "log",
      "stack_out": []
    },
    "127": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "128": {
      "op": "return",
      "stack_out": []
    },
    "129": {
      "block": "main_create_context_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "131": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "132": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "133": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "135": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "136": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "139": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "142": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "145": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "146": {
      "callsub": "smart_contracts.context_registry.contract.ContextRegistry.create_context",
      "op": "callsub create_context",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "149": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "0x151f7c75"
      ]
    },
    "155": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%10#0"
      ]
    },
    "156": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "157": {
      "op": "log",
      "stack_out": []
    },
    "158": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "159": {
      "op": "return",
      "stack_out": []
    },
    "160": {
      "block": "main_bare_routing@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "162": {
      "op": "bnz main_after_if_else@13",
      "stack_out": []
    },
    "165": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "167": {
      "op": "!",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "168": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "169": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "170": {
      "op": "return",
      "stack_out": []
    },
    "171": {
      "subroutine": "smart_contracts.context_registry.contract.ContextRegistry.create_context",
      "params": {
        "ipfs_hash#0": "bytes",
        "title#0": "bytes",
        "price#0": "uint64"
      },
      "block": "create_context",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "174": {
      "op": "frame_dig -1",
      "defined_out": [
        "price#0 (copy)"
      ],
      "stack_out": [
        "price#0 (copy)"
      ]
    },
    "176": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "price#0 (copy)"
      ],
      "stack_out": [
        "price#0 (copy)",
        "1000"
      ]
    },
    "179": {
      "op": ">=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "180": {
      "error": "Price too low",
      "op": "assert // Price too low",
      "stack_out": []
    },
    "181": {
      "op": "pushbytes 0x000b6374785f63726561746564",
      "defined_out": [
        "0x000b6374785f63726561746564"
      ],
      "stack_out": [
        "0x000b6374785f63726561746564"
      ]
    },
    "196": {
      "retsub": true,
      "op": "retsub"
    }
  }
}